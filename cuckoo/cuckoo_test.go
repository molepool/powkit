package cuckoo

import (
	"testing"

	"github.com/sencha-dev/powkit/internal/common/testutil"
)

func TestAeternity(t *testing.T) {
	tests := []struct {
		hash  []byte
		nonce uint64
		sols  []uint64
	}{
		{
			hash:  testutil.MustDecodeHex("0x8825085f881ee78f0c9cd94ca8a72ae930e025fd43931e4760e320a4f031d88e"),
			nonce: 0x0000fc7e000001a8,
			sols: []uint64{
				0x003b5d47, 0x00a70508, 0x00d0aa4a, 0x0238a16a, 0x038653bf, 0x03e91d96, 0x03f4baa8, 0x062ef17e,
				0x065d7b41, 0x066fbb1e, 0x079af861, 0x08bd2cf2, 0x0956b89d, 0x0b56fb7f, 0x0c098553, 0x0c6d2c27,
				0x0d8c0fd9, 0x0ddcbb1d, 0x0e3eccde, 0x0e464bef, 0x0fb09bef, 0x1267ebb1, 0x129ef8e6, 0x138432b5,
				0x144d428b, 0x1484e6b6, 0x14efcfba, 0x158d5352, 0x159f3551, 0x15a07563, 0x160a3efd, 0x17c9b61e,
				0x184499bc, 0x1844f434, 0x1919053a, 0x197a9095, 0x1aa04947, 0x1bc3f6e5, 0x1d8b4029, 0x1e6a1fe0,
				0x1e7e4380, 0x1f5a2a50,
			},
		},
		{
			hash:  testutil.MustDecodeHex("0x6166a5eae59cd13e37e6682e1bcc07fcc0b1e4d11ba231fb5e6f13aaf68df1b5"),
			nonce: 0x000028721b7b4e56,
			sols: []uint64{
				0x007791c9, 0x0197cfec, 0x025166a5, 0x025e30b8, 0x03d6aedc, 0x04311736, 0x0516b291, 0x05179816,
				0x056ac771, 0x068b92d8, 0x06aee4f8, 0x0817c500, 0x08c1a751, 0x08f1999c, 0x08f46654, 0x092b8770,
				0x096034f8, 0x09cfcb6f, 0x0d4f1cdb, 0x0d5b8793, 0x0d5c09a8, 0x0da0e97b, 0x0db38171, 0x0dc09c91,
				0x0e34aeaf, 0x0f0251df, 0x10486aa7, 0x14477924, 0x1544daf9, 0x1623e36e, 0x16b55699, 0x16fa6905,
				0x177125c6, 0x17f88a4d, 0x19243b3c, 0x19ebdaa7, 0x1b5383f1, 0x1c614cbf, 0x1de144f9, 0x1df596a7,
				0x1f629453, 0x1f6b9406,
			},
		},
		{
			hash:  testutil.MustDecodeHex("0x8ced411cbb09c197aaeadd04bcfc8cbfd2435f6b7ca9b5876179c86aa20cd84c"),
			nonce: 0x0000287296efe45f,
			sols: []uint64{
				0x008a9cad, 0x008ec69d, 0x00dbf03e, 0x020337ed, 0x0211161e, 0x02ee6658, 0x045d4488, 0x0534f601,
				0x0542e80c, 0x062d2002, 0x078ac9b5, 0x07b7112a, 0x07cb2202, 0x07fbc7e7, 0x088827a7, 0x093e3139,
				0x0a7af764, 0x0a92c274, 0x0ad8dcb9, 0x0bf8f10f, 0x0c0f0de0, 0x0cc6670d, 0x0dad83b3, 0x104f3b5e,
				0x11817d4c, 0x123a7b96, 0x12b9fbdd, 0x1337ce2b, 0x13432b38, 0x15b1b455, 0x16784bf4, 0x1693250e,
				0x169d804f, 0x16e811de, 0x195d114e, 0x1b77f0cb, 0x1c55fca6, 0x1cab0177, 0x1cb0a8c3, 0x1d38ea27,
				0x1d9aa6dc, 0x1f713d1f,
			},
		},
	}

	for i, tt := range tests {
		valid := NewAeternity().Verify(tt.hash, tt.nonce, tt.sols)
		if !valid {
			t.Errorf("failed on %d: invalid solution", i)
		}
	}
}
